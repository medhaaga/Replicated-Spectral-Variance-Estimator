
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> set.seed(1)
> library(cubature)
> library(Rcpp)
> library(RcppArmadillo)
> library(fftwtools)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-1 created on 2020-01-29.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> source("functions.R")
> sourceCpp("lag.cpp")
> 
> ############################################################
> ##creates freq=1000 replications of ASV and RSV for each value of nsim from check.pts
> ############################################################
> 
> create.output <- function(A,B,C,m,check.pts,freq,c.prob){
+   
+   start <- matrix(c(2*C,1,1,2*C), 2, 2)  #only depends on C
+   critical <- qchisq(c.prob, df=2)
+   T.mean <- true.mean(A,B,C)
+   
+   for (i in 1:length(check.pts)){
+     
+     nsim <- check.pts[i]
+     
+     asv.samp <- array(0, dim = c(2,2,freq))
+     rsv.samp <- array(0, dim = c(2,2,freq))
+     asv.coverage <- rep(0,freq)
+     rsv.coverage <- rep(0,freq)
+     
+     for (j in 1:freq){
+       if(j %% (freq/10) == 0) print(paste("Percentage completion: ", round(j/freq*100, 2), "for nsim = ", nsim))
+       chain <- array(0,dim = c(nsim,2,m))
+       sve <- array(0, dim = c(2,2,m))
+       rsve <- array(0, dim = c(2,2,m))
+       b <- rep(0,m)
+       
+       for (k in 1:m){
+         chain[,,k] <- markov.chain(A,B,C,nsim,start[k,])
+         b[k] <- batchSize(chain[,,k], method = "bartlett")
+       }
+       
+       b.avg <- mean(b)
+       global.mean <- apply(chain,2,mean)
+       
+       for (k in 1:m){
+         chain.cen.loc <- scale(chain[,,k], scale = FALSE)  ## X_st - bar(X)_s
+         sve[,,k] <- mSVEfft(A = chain.cen.loc, b = b.avg)
+         chain.cen <- scale(chain[,,k], center = global.mean, scale =FALSE)
+         rsve[,,k] <- mSVEfft(A = chain.cen, b = b.avg)
+       }
+       
+       asv.samp[,,j] <- apply(sve, c(1,2), mean)
+       rsv.samp[,,j] <- apply(rsve, c(1,2), mean)
+       
+       chi.sq.asv <- t2.stat(global.mean,T.mean,asv.samp[,,j],nsim*m)
+       chi.sq.rsv <- t2.stat(global.mean,T.mean,rsv.samp[,,j],nsim*m)
+       if (chi.sq.asv <= critical) {asv.coverage[j]=1}
+       if (chi.sq.rsv <= critical) {rsv.coverage[j]=1}
+     }
+     save(asv.samp,rsv.samp,asv.coverage,rsv.coverage, file = paste(paste("Out/out",nsim,A,B,C, sep = "_"),".Rdata", sep = ""))
+   }
+   
+ }
> 
> ##################################################
> #function for storing convergence plots data
> ##################################################
> convergence <- function(min, max, A, B, C){
+ 
+   start <- matrix(c(2*C,1,1,2*C), 2, 2)
+   master.chain <- array(0,dim = c(max,2,m))
+   
+   for (k in 1:m){
+     master.chain[,,k] <- markov.chain(A,B,C,max,start[k,])
+   }
+   conv.pts <- seq(min, max,500)
+   
+   l <- length(conv.pts)
+   asv.samp <- array(0, dim = c(2,2,l))
+   rsv.samp <- array(0, dim = c(2,2,l))
+   
+   for (j in 1:l){
+     nsim = conv.pts[j]
+     chain <- master.chain[1:nsim,,]
+     sve <- array(0, dim = c(2,2,m))
+     rsve <- array(0, dim = c(2,2,m))
+     b <- rep(0,m)
+     
+     for (k in 1:m){
+       b[k] <- batchSize(chain[,,k], method = "bartlett")
+     }
+     
+     b.avg <- mean(b)
+     global.mean <- apply(chain,2,mean)
+     
+     for (k in 1:m){
+       chain.cen.loc <- scale(chain[,,k], scale = FALSE)  ## X_st - bar(X)_s
+       sve[,,k] <- mSVEfft(A = chain.cen.loc, b = b.avg)
+       chain.cen <- scale(chain[,,k], center = global.mean, scale =FALSE)
+       rsve[,,k] <- mSVEfft(A = chain.cen, b = b.avg)
+     }
+     
+     asv.samp[,,j] <- apply(sve, c(1,2), mean)
+     rsv.samp[,,j] <- apply(rsve, c(1,2), mean)
+     if(j %% l/10 == 0) print(paste("Percentage completion: ", round(100*j/l, 2)))
+   }
+   save(asv.samp,rsv.samp, file = paste(paste("Out/conv_data", min, max, A, B, C, sep = "_"), ".Rdata", sep = ""))
+   
+ }
> 
> 
> ######################################################################
> #10*3 matrix for A,B,C parameters. Each row corresponds to a different suitable parameterization
> params <- matrix(c(1,2,7,1,8,9,1,9,9,2,6,7,2,8,7,2,9,7,2,10,8), nrow = 7, ncol=3, byrow = TRUE)
> m = 2
> #sims for plotting densities and calculating coverage
> 
> check.pts <- c(1e3, 2e3, 5e3, 1e4, 2e4)
> freq <- 1e3  #100 for now, will change later
> c.prob <- .95
> min <- 5e2
> max <- 1e4
> 
> t <- 6 ## choosing (2,9,7)
> # for creating .Rdata files for each set of parameter values
> # for (t in 1:7)
> # {
>   # print(paste("Sampling for A, B, C, = ", params[t,1], params[t,2], params[t,3], "respectively", sep = " "))
>   print("Carrying out 1000 repititions for each value of nsim in check.pts")
[1] "Carrying out 1000 repititions for each value of nsim in check.pts"
>   create.output(params[t,1], params[t,2], params[t,3], m, check.pts, freq, c.prob)
[1] "Percentage completion:  10 for nsim =  1000"
[1] "Percentage completion:  20 for nsim =  1000"
[1] "Percentage completion:  30 for nsim =  1000"
[1] "Percentage completion:  40 for nsim =  1000"
[1] "Percentage completion:  50 for nsim =  1000"
[1] "Percentage completion:  60 for nsim =  1000"
[1] "Percentage completion:  70 for nsim =  1000"
[1] "Percentage completion:  80 for nsim =  1000"
[1] "Percentage completion:  90 for nsim =  1000"
[1] "Percentage completion:  100 for nsim =  1000"
[1] "Percentage completion:  10 for nsim =  2000"
[1] "Percentage completion:  20 for nsim =  2000"
[1] "Percentage completion:  30 for nsim =  2000"
[1] "Percentage completion:  40 for nsim =  2000"
[1] "Percentage completion:  50 for nsim =  2000"
[1] "Percentage completion:  60 for nsim =  2000"
[1] "Percentage completion:  70 for nsim =  2000"
[1] "Percentage completion:  80 for nsim =  2000"
[1] "Percentage completion:  90 for nsim =  2000"
[1] "Percentage completion:  100 for nsim =  2000"
[1] "Percentage completion:  10 for nsim =  5000"
[1] "Percentage completion:  20 for nsim =  5000"
[1] "Percentage completion:  30 for nsim =  5000"
[1] "Percentage completion:  40 for nsim =  5000"
[1] "Percentage completion:  50 for nsim =  5000"
[1] "Percentage completion:  60 for nsim =  5000"
[1] "Percentage completion:  70 for nsim =  5000"
[1] "Percentage completion:  80 for nsim =  5000"
[1] "Percentage completion:  90 for nsim =  5000"
[1] "Percentage completion:  100 for nsim =  5000"
[1] "Percentage completion:  10 for nsim =  10000"
[1] "Percentage completion:  20 for nsim =  10000"
[1] "Percentage completion:  30 for nsim =  10000"
[1] "Percentage completion:  40 for nsim =  10000"
[1] "Percentage completion:  50 for nsim =  10000"
[1] "Percentage completion:  60 for nsim =  10000"
[1] "Percentage completion:  70 for nsim =  10000"
[1] "Percentage completion:  80 for nsim =  10000"
[1] "Percentage completion:  90 for nsim =  10000"
[1] "Percentage completion:  100 for nsim =  10000"
[1] "Percentage completion:  10 for nsim =  20000"
[1] "Percentage completion:  20 for nsim =  20000"
[1] "Percentage completion:  30 for nsim =  20000"
[1] "Percentage completion:  40 for nsim =  20000"
[1] "Percentage completion:  50 for nsim =  20000"
[1] "Percentage completion:  60 for nsim =  20000"
[1] "Percentage completion:  70 for nsim =  20000"
[1] "Percentage completion:  80 for nsim =  20000"
[1] "Percentage completion:  90 for nsim =  20000"
[1] "Percentage completion:  100 for nsim =  20000"
>   print("Carrying out simulations for convergence plots of ASV and RSV in the range(1e3, 1e5")
[1] "Carrying out simulations for convergence plots of ASV and RSV in the range(1e3, 1e5"
>   convergence(min, max, params[t,1], params[t,2], params[t,3])
[1] "Percentage completion:  100"
> # }
> 
> proc.time()
   user  system elapsed 
479.728  72.120 554.767 
