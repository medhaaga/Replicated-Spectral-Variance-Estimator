#############################################
time_sq2 <- rep(NA, N)
obj_sq2 <- rep(NA, N)
eval_sq2 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, method = "squarem", pconstr = param_constraint,
control.method = list(K=1, version=2), control.run = list(tol=tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_sq2[i] <- end.time - start.time
obj_sq2[i] <- fp$value.objfn
eval_sq2[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_sq2))))
print(round(quantile(time_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_sq2[!is.na(eval_sq2)], probs = c(.5, .25, .75)))
print(round(quantile(obj_sq2[!is.na(obj_sq2)], probs = c(.5, .25, .75)), 4))
##########################################
### SqS3
#############################################
time_sq3 <- rep(NA, N)
obj_sq3 <- rep(NA, N)
eval_sq3 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, method = "squarem", pconstr = param_constraint,
control.method = list(K=1, version=3), control.run = list(tol=tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_sq3[i] <- end.time - start.time
obj_sq3[i] <- fp$value.objfn
eval_sq3[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_sq3))))
print(round(quantile(time_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_sq3[!is.na(eval_sq3)], probs = c(.5, .25, .75)))
print(round(quantile(obj_sq3[!is.na(obj_sq3)], probs = c(.5, .25, .75)), 4))
##########################################
## ZAL, q=1
##########################################
time_zal <- rep(NA, N)
obj_zal <- rep(NA, N)
eval_zal <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, pconstr = param_constraint,
method = "qn", control.method = list(qn=2), control.run = list(tol = tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_zal[i] <- end.time - start.time
obj_zal[i] <- fp$value.objfn
eval_zal[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_zal))))
print(round(quantile(time_zal[!is.na(time_zal)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_zal[!is.na(eval_zal)], probs = c(.5, .25, .75)))
print(round(quantile(obj_zal[!is.na(obj_zal)], probs = c(.5, .25, .75)), 4))
save(time_mm, time_pxem, time_bqn1, time_bqn2, time_lbqn, time_sq1, time_sq2, time_sq3, time_zal,
eval_mm, eval_pxem, eval_bqn1, eval_bqn2, eval_lbqn, eval_sq1, eval_sq2, eval_sq3, eval_zal,
obj_mm, obj_pxem, obj_bqn1, obj_bqn2, obj_lbqn, obj_sq1, obj_sq2, obj_sq3, obj_zal, file = "Out/multiT-objects.Rdata")
time_zal <- rep(NA, N)
obj_zal <- rep(NA, N)
eval_zal <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data,
method = "qn", control.method = list(qn=2), control.run = list(tol = tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_zal[i] <- end.time - start.time
obj_zal[i] <- fp$value.objfn
eval_zal[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_zal))))
print(round(quantile(time_zal[!is.na(time_zal)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_zal[!is.na(eval_zal)], probs = c(.5, .25, .75)))
print(round(quantile(obj_zal[!is.na(obj_zal)], probs = c(.5, .25, .75)), 4))
#############################################
######## Multivariate t-distribution ########
#############################################
rm(list = ls())
library(LaplacesDemon)
library(pracma)
library(turboEM)
library(quasiNewtonMM)
source("functions.R")
##################################################
set.seed(1)
dim <- 25
tol <- 1e-7
P <- (dim/2)*(dim+3)
n <- 100
mu <- rep(0, dim)
u <- matrix(rnorm(dim*dim, sd = 100), dim, dim)
sigma <- t(u) %*% u
data <- rmvc(n=n, mu = mu, S = sigma)
N <- 1
start_rep <- matrix(0, nrow = N, ncol = P)
for (i in 1:N)
{
mu0 <- colMeans(data)
sigma0 <- cov(data)
start_rep[i,] <- c(mu0, upper.triangle(sigma0, diag=  TRUE))
}
###########################################
## Unaccelerated EM Algorithm
###########################################
time_mm <- rep(NA, N)
obj_mm <- rep(NA, N)
eval_mm <- rep(NA, N)
for (i in 1:N){
print(i)
now <- start_rep[i,]
new <- start_rep[i,]
diff <- 100
iter <- 0
start.time <- Sys.time()
while((diff > tol))
{
iter <- iter + 1
if(iter %% 100 == 0) print(diff)
new <- update(now, n=n, dim=dim, data=data)
diff <- sqrt(crossprod(new-now))
now <- new
}
end.time <- Sys.time()
time_mm[i] <- end.time - start.time
obj_mm[i] <- likelihood(new, n=n, dim=dim, data=data)
eval_mm[i] <- iter
}
print(paste("Number of failures:", sum(is.na(time_mm))))
print(round(quantile(time_mm, probs = c(.5, .25, .75)), 3))
print(quantile(eval_mm, probs = c(.5, .25, .75)))
print(round(quantile(obj_mm, probs = c(.5, .25, .75)), 4))
###########################################
## PX-EM
###########################################
time_pxem <- rep(NA, N)
obj_pxem <- rep(NA, N)
eval_pxem <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- fpiter(par = start, n=n, dim=dim, data=data, fixptfn = update_pxem,
objfn = likelihood, control = list(tol = tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_pxem[i] <- end.time - start.time
obj_pxem[i] <- fp$value.objfn
eval_pxem[i] <- fp$fpevals
}
}
print(paste("Number of failures:", sum(is.na(time_pxem))))
print(round(quantile(time_pxem[!is.na(time_pxem)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_pxem[!is.na(eval_pxem)], probs = c(.5, .25, .75)))
print(round(quantile(obj_pxem[!is.na(obj_pxem)], probs = c(.5, .25, .75)), 4))
########################################
## BQN, q=1
########################################
time_bqn1 <- rep(NA, N)
obj_bqn1 <- rep(NA, N)
eval_bqn1 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- BQN(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, control = list(qn=1, tol = tol, maxiter = 1e3, objfn.inc = 100))
end.time <- Sys.time()
if(fp$convergence){
time_bqn1[i] <- end.time - start.time
obj_bqn1[i] <- fp$value.objfn
eval_bqn1[i] <- fp$fpevals
}
}
print(paste("Number of failures:", sum(is.na(time_bqn1))))
print(round(quantile(time_bqn1[!is.na(time_bqn1)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_bqn1[!is.na(eval_bqn1)], probs = c(.5, .25, .75)))
print(round(quantile(obj_bqn1[!is.na(obj_bqn1)], probs = c(.5, .25, .75)), 4))
########################################
## BQN, q=2
########################################
time_bqn2 <- rep(NA, N)
obj_bqn2 <- rep(NA, N)
eval_bqn2 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- BQN(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data,
control = list(qn=2, tol = tol, maxiter = 1e3, objfn.inc = .1))
end.time <- Sys.time()
if(fp$convergence){
time_bqn2[i] <- end.time - start.time
obj_bqn2[i] <- fp$value.objfn
eval_bqn2[i] <- fp$fpevals
}
}
print(paste("Number of failures:", sum(is.na(time_bqn2))))
print(round(quantile(time_bqn2[!is.na(time_bqn2)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_bqn2[!is.na(eval_bqn2)], probs = c(.5, .25, .75)))
print(round(quantile(obj_bqn2[!is.na(obj_bqn2)], probs = c(.5, .25, .75)), 4))
########################################
## L-BQN
########################################
time_lbqn <- rep(NA, N)
obj_lbqn <- rep(NA, N)
eval_lbqn <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- LBQN(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data,
control = list(m=10, tol = tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_lbqn[i] <- end.time - start.time
obj_lbqn[i] <- fp$value.objfn
eval_lbqn[i] <- fp$fpevals
}
}
print(paste("Number of failures:", sum(is.na(time_lbqn))))
print(round(quantile(time_lbqn[!is.na(time_lbqn)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_lbqn[!is.na(eval_lbqn)], probs = c(.5, .25, .75)))
print(round(quantile(obj_lbqn[!is.na(obj_lbqn)], probs = c(.5, .25, .75)), 4))
##########################################
### SqS1
#############################################
time_sq1 <- rep(NA, N)
obj_sq1 <- rep(NA, N)
eval_sq1 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, method = "squarem",
control.method = list(K=1, version=1), control.run = list(tol=tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_sq1[i] <- end.time - start.time
obj_sq1[i] <- fp$value.objfn
eval_sq1[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_sq1))))
print(round(quantile(time_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_sq1[!is.na(eval_sq1)], probs = c(.5, .25, .75)))
print(round(quantile(obj_sq1[!is.na(obj_sq1)], probs = c(.5, .25, .75)), 4))
##########################################
### SqS2
#############################################
time_sq2 <- rep(NA, N)
obj_sq2 <- rep(NA, N)
eval_sq2 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, method = "squarem",
control.method = list(K=1, version=2), control.run = list(tol=tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_sq2[i] <- end.time - start.time
obj_sq2[i] <- fp$value.objfn
eval_sq2[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_sq2))))
print(round(quantile(time_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_sq2[!is.na(eval_sq2)], probs = c(.5, .25, .75)))
print(round(quantile(obj_sq2[!is.na(obj_sq2)], probs = c(.5, .25, .75)), 4))
##########################################
### SqS3
#############################################
time_sq3 <- rep(NA, N)
obj_sq3 <- rep(NA, N)
eval_sq3 <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, method = "squarem",
control.method = list(K=1, version=3), control.run = list(tol=tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_sq3[i] <- end.time - start.time
obj_sq3[i] <- fp$value.objfn
eval_sq3[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_sq3))))
print(round(quantile(time_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_sq3[!is.na(eval_sq3)], probs = c(.5, .25, .75)))
print(round(quantile(obj_sq3[!is.na(obj_sq3)], probs = c(.5, .25, .75)), 4))
##########################################
## ZAL, q=1
##########################################
time_zal <- rep(NA, N)
obj_zal <- rep(NA, N)
eval_zal <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = likelihood, n=n, dim=dim, data=data, pconstr = param_constraint,
method = "qn", control.method = list(qn=2), control.run = list(tol = tol, maxiter = 1e3))
end.time <- Sys.time()
if(fp$convergence){
time_zal[i] <- end.time - start.time
obj_zal[i] <- fp$value.objfn
eval_zal[i] <- fp$fpeval
}
}
print(paste("Number of failures:", sum(is.na(time_zal))))
print(round(quantile(time_zal[!is.na(time_zal)], probs = c(.5, .25, .75)), 3))
print(quantile(eval_zal[!is.na(eval_zal)], probs = c(.5, .25, .75)))
print(round(quantile(obj_zal[!is.na(obj_zal)], probs = c(.5, .25, .75)), 4))
save(time_mm, time_pxem, time_bqn1, time_bqn2, time_lbqn, time_sq1, time_sq2, time_sq3, time_zal,
eval_mm, eval_pxem, eval_bqn1, eval_bqn2, eval_lbqn, eval_sq1, eval_sq2, eval_sq3, eval_zal,
obj_mm, obj_pxem, obj_bqn1, obj_bqn2, obj_lbqn, obj_sq1, obj_sq2, obj_sq3, obj_zal, file = "Out/multiT-objects.Rdata")
##########################################
###### Scatter plots ######################
############################################
load(file = "Out/var-neg_five_chains.Rdata")
setwd("~/GitHub/Replicated-Spectral-Variance-Estimator/Examples/negVAR-1")
##########################################
###### Scatter plots ######################
############################################
load(file = "Out/var-neg_five_chains.Rdata")
nsim <- 1e3
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
m <- 5
nsim <- 1e3
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
set.seed(10)
source("functions.R")
library(multichainACF)
m <- 5
p <- 2
omega <- diag(p)
for (i in 1:(p-1)){
for (j in 1:(p-i)){
omega[j, j+i] <- .9^i
omega[j+i, j] <- .9^i
}
}
phi <- diag(c(.999, .001))
dummy <- matrix(1:p^2, nrow = p, ncol = p)
dummy <- qr.Q(qr(dummy))
phi <- dummy %*% phi %*% t(dummy)
diag(phi) <- -diag(phi)
target <- target.sigma(phi, omega)
truth <- true.sigma(phi, var = target)
lag.max <- 40
true.acf <- array(0, dim = c(p, p, 2*lag.max + 1))
true.acf[,,lag.max+1] <- target
for (i in 1:lag.max){
true.acf[,,lag.max + 1 + i] <- phi %*% true.acf[,,lag.max + 1 + i - 1]
true.acf[,,lag.max + 1 - i] <- true.acf[,,lag.max + 1 - i + 1] %*% t(phi)
}
################ Only for creating Markov chains. Don't run. ##################
start <- matrix(0, nrow = m, ncol = p)  #only depends on C
for(i in 1:floor(m/2)){
start[i,] <- i*sqrt(diag(target))
start[m-i+1,] <- -i*sqrt(diag(target))
}
mc.chain.list <- list()
global.mean <- rep(0,p)
for (i in 1:m){
chain <- markov.chain(phi, omega, 1e4, start[i,])
global.mean <- global.mean + colMeans(chain)
mc.chain.list[[i]] = chain
print(colMeans(chain))
}
global.mean <- global.mean/m
save(mc.chain.list, true.acf, file = "Out/var-neg_five_chains.Rdata")
################ Only for creating Markov chains. Don't run. ##################
start <- matrix(0, nrow = m, ncol = p)  #only depends on C
for(i in 1:floor(m/2)){
start[i,] <- i*sqrt(diag(target))
start[m-i+1,] <- -i*sqrt(diag(target))
}
mc.chain.list <- list()
global.mean <- rep(0,p)
for (i in 1:m){
chain <- markov.chain(phi, omega, 1e4, start[i,])
global.mean <- global.mean + colMeans(chain)
mc.chain.list[[i]] = chain
print(colMeans(chain))
}
global.mean <- global.mean/m
save(mc.chain.list, true.acf, file = "Out/var-neg_five_chains.Rdata")
load(file = "Out/var-neg_five_chains.Rdata")
component <- 1
##########################################
###### Scatter plots ######################
############################################
load(file = "Out/var-neg_five_chains.Rdata")
m <- 5
nsim <- 1e3
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("bottomright", legend = c("Chain-1", "Chain-5"), col = c("dodgerblue4", "steelblue1"), pch = 19)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[2]][1:nsim,], col = "pink")
points(mc.chain.list[[3]][1:nsim,], col = "orange")
points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("bottomright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
############################################
load(file = "Out/var-neg_five_chains.Rdata")
m <- 5
nsim <- 1e3
pdf(file = ("Out/var-sp_n1e3.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[2]][1:nsim,], col = "pink")
points(mc.chain.list[[3]][1:nsim,], col = "orange")
points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
nsim <- 1e5
pdf(file = ("Out/var-sp_n1e4.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[2]][1:nsim,], col = "pink")
points(mc.chain.list[[3]][1:nsim,], col = "orange")
points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
### Scatter plots ######################
############################################
load(file = "Out/var-neg_five_chains.Rdata")
m <- 5
nsim <- 1e3
pdf(file = ("Out/var-sp_n1e3.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[2]][1:nsim,], col = "pink")
points(mc.chain.list[[3]][1:nsim,], col = "orange")
points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
nsim <- 1e4
pdf(file = ("Out/var-sp_n1e4.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
points(mc.chain.list[[2]][1:nsim,], col = "pink")
points(mc.chain.list[[3]][1:nsim,], col = "orange")
points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
#### Scatter plots ######################
############################################
load(file = "Out/var-neg_five_chains.Rdata")
m <- 5
nsim <- 1e3
pdf(file = ("Out/var-sp_n1e3.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
#points(mc.chain.list[[2]][1:nsim,], col = "pink")
#points(mc.chain.list[[3]][1:nsim,], col = "orange")
#points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
nsim <- 1e4
pdf(file = ("Out/var-sp_n1e4.pdf"), height = 5, width = 5)
plot(mc.chain.list[[1]][1:nsim,], xlim = c(-(m/2)*sqrt(diag(target)[1]), (m/2)*sqrt(diag(target)[1])),
ylim = c(-(m/2)*sqrt(diag(target)[2]), (m/2)*sqrt(diag(target)[2])), xlab = "X component",
ylab = "Y component", main = "", col = "dodgerblue4")
#points(mc.chain.list[[2]][1:nsim,], col = "pink")
#points(mc.chain.list[[3]][1:nsim,], col = "orange")
#points(mc.chain.list[[4]][1:nsim,], col = "green3")
points(mc.chain.list[[5]][1:nsim,], col = "steelblue1")
legend("topright", legend = c("Chain-1", "Chain-2", "Chain-3", "Chain-4", "Chain-5"), col = c("dodgerblue4", "pink", "orange", "green3", "steelblue1"), pch = 19)
dev.off()
