
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(cubature)
> library(Rcpp)
> library(RcppArmadillo)
> library(fftwtools)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-3 created on 2020-04-22.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> source("functions.R")
> sourceCpp("lag.cpp")
> ######## Data
> 
> # Observation indicators from the fifth sensor (1st column) to the first four sensors
> # and those from the sixth sensor (2nd column) to the first four sensors.
> Ob <- matrix(c(1, 0, 1, 0, 1, 0, 1, 0), ncol = 2)
> 
> # Observation indicators among the first four sensors.
> Os <- matrix(c(0, 0, 0, 1,
+                0, 0, 1, 1,
+                0, 1, 0, 0,
+                1, 1, 0, 0), ncol = 4)
> 
> # Each row indicates the location of the known sensors (5th and 6th).
> Xb <- matrix(c(0.5, 0.3, 0.3, 0.7), ncol = 2)
> 
> # Each row indicates the location of the unknown sensors (1st, 2nd, 3rd, and 4th).
> Xs <- matrix(c(0.5748, 0.0991, 0.2578, 0.8546,
+                0.9069, 0.3651, 0.1350, 0.0392), ncol = 2)
> 
> # The observed distances from the fifth sensor (1st column) to the first four sensors
> # and those from the sixth sensor (2nd column) to the first four sensors.
> Yb <- matrix(c(0.6103, 0, 0.2995, 0,
+                0.3631, 0, 0.5656, 0), ncol = 2)
> 
> # Observed distances among the first four sensors.
> Ys <- matrix(c(0, 0, 0, 0.9266,
+                0, 0, 0.2970, 0.8524,
+                0, 0.2970, 0, 0,
+                0.9266, 0.8524, 0, 0), ncol = 4)
> 
> ############################################################
> ##creates freq=1000 replications of ASV and RSV for each value of nsim from check.pts
> ############################################################
> 
> create.output <- function(start, aux, j.scale, Ob, Os, Xb, Xs, Yb, Ys, m, check.pts, freq,truth){
+ 
+   p <- 8
+ 
+   for (i in 1:length(check.pts)){
+ 
+     nsim <- check.pts[i]
+     critical <- ((nsim*m - 1)*p/(nsim*m  - p))*qf(.95, df1 = p, df2 = (nsim*m-p))
+     asv.samp <- array(0, dim = c(p,p,freq))
+     rsv.samp <- array(0, dim = c(p,p,freq))
+     asv.coverage <- rep(0,freq)
+     rsv.coverage <- rep(0,freq)
+ 
+ 
+     for (j in 1:freq){
+       if(j %% (freq/10) == 0) print(paste("Percentage completion: ", round(j/freq*100, 2), "for nsim = ", nsim))
+       chain <- array(0,dim = c(nsim,p,m))
+       sve <- array(0, dim = c(p,p,m))
+       rsve <- array(0, dim = c(p,p,m))
+       b <- rep(0,m)
+ 
+       for(k in 1:m){
+         temp <- MHwG.RAM(start[k,], aux[k,], jump.scale = j.scale, Ob, Os, Xb, Xs, Yb, Ys,
+                                n.sample = nsim+1, n.burn = 0)
+         chain[,,k] <- temp$x
+         print(colMeans(temp$accept))
+         b[k] <- batchSize(chain[,,k], method = "bartlett")
+       }
+ 
+       b.avg <- floor(mean(b))
+       global.mean <- apply(chain,2,mean)
+ 
+       for (k in 1:m){
+         chain.cen.loc <- scale(chain[,,k], scale = FALSE)  ## X_st - bar(X)_s
+         sve[,,k] <- mSVEfft(A = chain.cen.loc, b = b.avg)
+         chain.cen <- scale(chain[,,k], center = global.mean, scale =FALSE)
+         rsve[,,k] <- mSVEfft(A = chain.cen, b = b.avg)
+       }
+ 
+       asv.samp[,,j] <- apply(sve, c(1,2), mean)
+       rsv.samp[,,j] <- apply(rsve, c(1,2), mean)
+ 
+       chi.sq.asv <- t2.stat(global.mean,truth,asv.samp[,,j],nsim*m)
+       chi.sq.rsv <- t2.stat(global.mean,truth,rsv.samp[,,j],nsim*m)
+       if (chi.sq.asv <= critical) {asv.coverage[j]=1}
+       if (chi.sq.rsv <= critical) {rsv.coverage[j]=1}
+     }
+     save(asv.coverage, rsv.coverage, asv.samp,rsv.samp, file = paste(paste("Out/out",nsim, sep = "_"),".Rdata", sep = ""))
+   }
+ 
+ }
> 
> ##################################################
> #function for storing convergence plots data
> ##################################################
> convergence <- function(min, max, start, aux, j.scale, Ob, Os, Xb, Xs, Yb, Ys, m, rep=100, step=500){
+ 
+   p <- 8
+   conv.pts <- seq(min, max, step)
+   l <- length(conv.pts)
+   asv <- list()
+   rsv <- list()
+   ess.asv <- list()
+   ess.rsv <- list()
+   
+   for (r in 1:rep){
+     
+     print(paste("Sampling for rep =", r))
+     
+     asv.samp <- array(0, dim = c(p, p, l))
+     rsv.samp <- array(0, dim = c(p, p, l))
+     ess.asv.samp <- rep(0, l)
+     ess.rsv.samp <- rep(0, l)
+     
+     master.chain <- array(0, dim = c(max, p, m))
+     
+     for (k in 1:m){
+       temp <- MHwG.RAM(start[k,], aux[k,], jump.scale = j.scale,Ob, Os, Xb, Xs, Yb, Ys, n.sample = max+1, n.burn = 0)
+       master.chain[,,k] <- temp$x
+       print(colMeans(temp$accept)) 
+     }
+     
+     for (j in 1:l){
+       
+       nsim <- conv.pts[j]
+       chain <- master.chain[1:nsim,,]
+       sve <- array(0, dim = c(p,p,m))
+       rsve <- array(0, dim = c(p,p,m))
+       smpl.cov <- array(0, dim = c(p,p,m))
+       b <- rep(0,m)
+       
+       for (k in 1:m){
+         b[k] <- batchSize(chain[,,k], method = "bartlett")
+         smpl.cov[,,k] <- cov(chain[,,k])
+       }
+       
+       b.avg <- ceiling(mean(b))
+       
+       global.mean <- apply(chain,2,mean)
+       
+       for (k in 1:m){
+         chain.cen.loc <- scale(chain[,,k], scale = FALSE)  ## X_st - bar(X)_s
+         sve[,,k] <- mSVEfft(A = chain.cen.loc, b = b.avg)
+         chain.cen <- scale(chain[,,k], center = global.mean, scale =FALSE)
+         rsve[,,k] <- mSVEfft(A = chain.cen, b = b.avg)
+         
+       }
+       
+       asv.samp[,,j] <- apply(sve, c(1,2), mean)
+       rsv.samp[,,j] <- apply(rsve, c(1,2), mean)
+       lambda.rep <- apply(smpl.cov, c(1,2), mean)
+       ess.asv.samp[j] <- (det(lambda.rep)/det(asv.samp[,,j]))^(1/p)
+       ess.rsv.samp[j] <- (det(lambda.rep)/det(rsv.samp[,,j]))^(1/p)
+       
+     }
+     
+     asv[[r]] <- asv.samp
+     rsv[[r]] <- rsv.samp
+     ess.asv[[r]] <- ess.asv.samp
+     ess.rsv[[r]] <- ess.rsv.samp
+     
+     save(asv, rsv, ess.asv, ess.rsv, 
+     file = paste("Out/conv_data_m", m, "_min", min, "_max", max, ".Rdata", sep = "")) 
+   }
+   
+ }
> 
> 
> ######################################################################
> m <- 5
> start1 <- c(-0.1, 0.5, -0.1, -0.2, 0.1, 0.1, -0.5, -0.5)
> aux1 <- runif(n=8, min=min(start1), max=max(start1))
> start2 <- c(0.0, 0.6, 0.1, 0.1, 0.2, 0.2, 1.0, 0.0)
> aux2 <- runif(n=8, min=min(start2), max=max(start2))
> start3 <- c(0.2, 0.7, 0.5, 0.4, 0.5, 0.3, 0.5, 0.5)
> aux3 <- runif(n=8, min=min(start3), max=max(start3))
> start4 <- c(0.4, 0.8, 0.8, 0.6, 0.7, 0.4, 1.0, 1.0)
> aux4 <- runif(n=8, min=min(start4), max=max(start4))
> start5 <- c(0.7, 1.0, 1.2, 0.9, 0.9, 0.5, 1.5, 1.5)
> aux5 <- runif(n=8, min=min(start5), max=max(start5))
> 
> start <- rbind(start1, start2, start3, start4, start5)
> aux <- rbind(aux1, aux2, aux3, aux4, aux5)
> j.scale <- rep(0.5, 4)
> truth <- c(0.5748, 0.9069, 0.0991, 0.3651, 0.2578, 0.1350, 0.8546, 0.0392)
> #sims for plotting densities and calculating coverage
> 
> check.pts <- c(1e3, 5e3, 1e4, 5e4, 1e5)
> freq <- 10
> rep <- 10
> c.prob <- .95
> min <- 500
> max <- 2e5
> step <- 500
> conv.pts <- seq(min, max, step)
> 
> # print("Carrying out 1000 repititions for each value of nsim in check.pts")
> # create.output(start, aux, j.scale, Ob, Os, Xb, Xs, Yb, Ys, m, check.pts, freq, truth)
> 
> print("Carrying out simulations for convergence plots of ASV and RSV in the range(1e3, 1e5")
[1] "Carrying out simulations for convergence plots of ASV and RSV in the range(1e3, 1e5"
> 
> convergence(min, max, start, aux, j.scale, Ob, Os, Xb, Xs, Yb, Ys, m, rep, step = step)
[1] "Sampling for rep = 1"
[1] "2020-07-17 10:15:41 IST"
[1] "2020-07-17 10:43:46 IST"
[1] 0.014020 0.029680 0.013470 0.022505
[1] "2020-07-17 10:43:46 IST"
[1] "2020-07-17 11:12:09 IST"
[1] 0.013755 0.029330 0.013410 0.022615
[1] "2020-07-17 11:12:10 IST"
[1] "2020-07-17 11:40:19 IST"
[1] 0.012835 0.029085 0.013650 0.021275
[1] "2020-07-17 11:40:20 IST"
[1] "2020-07-17 12:08:42 IST"
[1] 0.013835 0.029645 0.013615 0.022860
[1] "2020-07-17 12:08:42 IST"
[1] "2020-07-17 12:35:52 IST"
[1] 0.014090 0.030165 0.013725 0.023545
[1] "Sampling for rep = 2"
[1] "2020-07-17 13:18:31 IST"
[1] "2020-07-17 13:46:21 IST"
[1] 0.013745 0.029550 0.013640 0.022280
[1] "2020-07-17 13:46:21 IST"
[1] "2020-07-17 14:14:24 IST"
[1] 0.013645 0.029570 0.013770 0.022155
[1] "2020-07-17 14:14:24 IST"
[1] "2020-07-17 14:42:27 IST"
[1] 0.013430 0.030075 0.013395 0.021315
[1] "2020-07-17 14:42:27 IST"
[1] "2020-07-17 15:10:22 IST"
[1] 0.01422 0.03064 0.01421 0.02289
[1] "2020-07-17 15:10:22 IST"
[1] "2020-07-17 15:38:30 IST"
[1] 0.013220 0.029415 0.013415 0.021650
[1] "Sampling for rep = 3"
[1] "2020-07-17 16:19:31 IST"
[1] "2020-07-17 16:48:00 IST"
[1] 0.013555 0.029720 0.014260 0.020930
[1] "2020-07-17 16:48:00 IST"
[1] "2020-07-17 17:16:31 IST"
[1] 0.013825 0.031840 0.013720 0.021290
[1] "2020-07-17 17:16:32 IST"
[1] "2020-07-17 17:45:20 IST"
[1] 0.013670 0.028530 0.013455 0.021220
[1] "2020-07-17 17:45:20 IST"
[1] "2020-07-17 18:14:07 IST"
[1] 0.012670 0.027810 0.013640 0.021325
[1] "2020-07-17 18:14:07 IST"
[1] "2020-07-17 18:41:48 IST"
[1] 0.014330 0.031330 0.014050 0.024465
[1] "Sampling for rep = 4"
[1] "2020-07-17 19:22:34 IST"
[1] "2020-07-17 19:50:01 IST"
[1] 0.013730 0.029260 0.013335 0.021865
[1] "2020-07-17 19:50:01 IST"
[1] "2020-07-17 20:17:35 IST"
[1] 0.013515 0.029485 0.013355 0.021185
[1] "2020-07-17 20:17:35 IST"
[1] "2020-07-17 20:45:04 IST"
[1] 0.01371 0.02924 0.01339 0.02323
[1] "2020-07-17 20:45:04 IST"
[1] "2020-07-17 21:12:38 IST"
[1] 0.013300 0.030570 0.013430 0.021385
[1] "2020-07-17 21:12:38 IST"
[1] "2020-07-17 21:39:36 IST"
[1] 0.013380 0.028720 0.014160 0.022185
[1] "Sampling for rep = 5"
[1] "2020-07-17 22:20:23 IST"
[1] "2020-07-17 22:47:09 IST"
[1] 0.013635 0.029800 0.013560 0.022255
[1] "2020-07-17 22:47:09 IST"
[1] "2020-07-17 23:14:03 IST"
[1] 0.013665 0.030645 0.013850 0.022720
[1] "2020-07-17 23:14:03 IST"
[1] "2020-07-17 23:41:04 IST"
[1] 0.01321 0.03029 0.01388 0.02201
[1] "2020-07-17 23:41:04 IST"
[1] "2020-07-18 00:07:47 IST"
[1] 0.014310 0.029195 0.013750 0.021910
[1] "2020-07-18 00:07:48 IST"
[1] "2020-07-18 00:34:40 IST"
[1] 0.012850 0.029005 0.013450 0.021740
[1] "Sampling for rep = 6"
[1] "2020-07-18 01:14:18 IST"
[1] "2020-07-18 01:41:07 IST"
[1] 0.013805 0.028790 0.013030 0.023040
[1] "2020-07-18 01:41:07 IST"
[1] "2020-07-18 02:08:08 IST"
[1] 0.014070 0.029895 0.013735 0.021845
[1] "2020-07-18 02:08:08 IST"
[1] "2020-07-18 02:35:08 IST"
[1] 0.014170 0.029965 0.013420 0.022715
[1] "2020-07-18 02:35:08 IST"
[1] "2020-07-18 03:02:09 IST"
[1] 0.014025 0.030295 0.014070 0.021485
[1] "2020-07-18 03:02:09 IST"
[1] "2020-07-18 03:29:07 IST"
[1] 0.013255 0.029295 0.013595 0.022105
[1] "Sampling for rep = 7"
[1] "2020-07-18 04:09:41 IST"
[1] "2020-07-18 04:36:31 IST"
[1] 0.013445 0.030055 0.013880 0.020845
[1] "2020-07-18 04:36:31 IST"
[1] "2020-07-18 05:03:22 IST"
[1] 0.013940 0.030330 0.012965 0.022570
[1] "2020-07-18 05:03:23 IST"
[1] "2020-07-18 05:30:12 IST"
[1] 0.014040 0.030040 0.013960 0.021535
[1] "2020-07-18 05:30:12 IST"
[1] "2020-07-18 05:56:58 IST"
[1] 0.013580 0.030840 0.013465 0.022390
[1] "2020-07-18 05:56:59 IST"
[1] "2020-07-18 06:23:47 IST"
[1] 0.013785 0.028695 0.013915 0.020870
[1] "Sampling for rep = 8"
[1] "2020-07-18 07:02:17 IST"
[1] "2020-07-18 07:29:05 IST"
[1] 0.014135 0.030870 0.013675 0.022250
[1] "2020-07-18 07:29:06 IST"
[1] "2020-07-18 07:55:51 IST"
[1] 0.013710 0.031190 0.013995 0.022160
[1] "2020-07-18 07:55:51 IST"
[1] "2020-07-18 08:22:36 IST"
[1] 0.013215 0.029770 0.013955 0.022680
[1] "2020-07-18 08:22:36 IST"
[1] "2020-07-18 08:49:22 IST"
[1] 0.013885 0.028125 0.014295 0.021700
[1] "2020-07-18 08:49:22 IST"
[1] "2020-07-18 09:16:15 IST"
[1] 0.013380 0.027065 0.013670 0.021215
[1] "Sampling for rep = 9"
[1] "2020-07-18 09:55:54 IST"
[1] "2020-07-18 10:22:35 IST"
[1] 0.013615 0.031585 0.013555 0.022110
[1] "2020-07-18 10:22:35 IST"
[1] "2020-07-18 10:49:20 IST"
[1] 0.013500 0.028700 0.013425 0.021985
[1] "2020-07-18 10:49:20 IST"
[1] "2020-07-18 11:16:11 IST"
[1] 0.013740 0.027135 0.013660 0.022580
[1] "2020-07-18 11:16:11 IST"
[1] "2020-07-18 11:42:57 IST"
[1] 0.013590 0.027785 0.013745 0.021820
[1] "2020-07-18 11:42:57 IST"
[1] "2020-07-18 12:09:46 IST"
[1] 0.013635 0.028790 0.012940 0.022000
[1] "Sampling for rep = 10"
[1] "2020-07-18 12:48:35 IST"
[1] "2020-07-18 13:15:33 IST"
[1] 0.013315 0.027530 0.013905 0.019585
[1] "2020-07-18 13:15:34 IST"
[1] "2020-07-18 13:42:26 IST"
[1] 0.013975 0.028440 0.013965 0.020535
[1] "2020-07-18 13:42:26 IST"
[1] "2020-07-18 14:09:14 IST"
[1] 0.014400 0.031045 0.013555 0.023020
[1] "2020-07-18 14:09:14 IST"
[1] "2020-07-18 14:36:14 IST"
[1] 0.014280 0.029395 0.013580 0.023145
[1] "2020-07-18 14:36:14 IST"
[1] "2020-07-18 15:03:02 IST"
[1] 0.013375 0.030080 0.013650 0.020985
> 
> 
> 
> proc.time()
      user     system    elapsed 
100385.416   5528.067 105995.025 
