
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rep.acf.ccf)
> 
> ##########################################
> ##########################################
> ####### Ex1: Gaussian Mixtures ###########
> ##########################################
> ##########################################
> 
> log.density <- function(x, p, mu1, mu2, sd1, sd2){
+   return(log(p*dnorm(x, mean = mu1, sd = sd1) + (1-p)*dnorm(x, mean = mu2, sd= sd2)))
+ }
> 
> m <- 2
> p <- 0.7
> mu1 <- -5
> mu2 <- 5
> sd1 <- 1
> sd2 <- 0.5
> 
> load(file = "AllOut/gaussian-two_chains.Rdata")
> chain1 <- mc.chain.list[[1]]
> chain2 <- mc.chain.list[[2]]
> 
> ################### Figure 1 #######################
> 
> ## Figure 1a
> 
> x <- seq(-10, 10, length = 1e3)
> pdf(file = "AllOut/gaussian-TargetTrace_n1e4.pdf", height = 5, width = 6)
> plot(x, 20000*exp(log.density(x, p, mu1, mu2, sd1, sd2)), type = "l", lwd=2, xlab = "x", ylab = "", ylim = c(-10000,6000), xlim = range(chain1,chain2), yaxt = 'n')
> par(new = TRUE)
> plot(x = chain1[1:1e4], y = seq(-1, -1e4, -1), col = "lightskyblue", xlab = "", ylab = "", type = "l", ylim = c(-1e4, 6e3), , xlim = range(chain1,chain2), yaxt = 'n')
> lines(x = chain2[1:1e4], y = seq(-1, -1e4, -1), col = "plum3")
> mtext(side = 2, text = "Time", line = 1)
> legend("topleft", legend=c("Target", "Chain-1", "Chain-2"),col=c("black", "lightskyblue", "plum3"), lty=1, cex=0.7, lwd=2)
> dev.off()
null device 
          1 
> 
> #Figure 1b
> pdf(file = "AllOut/gaussian-TargetTrace_n1e5.pdf", height = 5, width = 6)
> plot(x, 200000*exp(log.density(x, p, mu1, mu2, sd1, sd2)), type = "l", lwd=2, xlab = "x", ylab = "", ylim = c(-1e5,6e4), xlim = range(chain1,chain2), yaxt = 'n')
> par(new = TRUE)
> plot(x = chain1, y = seq(-1, -1e5, -1), col = "lightskyblue", xlab = "", ylab = "", type = "l", ylim = c(-1e5, 6e4), , xlim = range(chain1,chain2), yaxt = 'n')
> lines(x = chain2, y = seq(-1, -1e5, -1), col = "plum3")
> mtext(side = 2, text = "Time", line = 1)
> legend("topleft", legend=c("Target", "Chain-1", "Chain-2"),col=c("black", "lightskyblue", "plum3"), lty=1, cex=0.7, lwd=2)
> dev.off()
null device 
          1 
> 
> #################### Figure 2 #######################
> 
> lag.max <- 50
> nsim1 <- 1e4
> nsim2 <- 5e4
> 
> x <- list()
> y <- list()
> for (i in 1:m){
+   x[[i]] <- as.matrix(mc.chain.list[[i]], ncol=1)[1:nsim1,]
+   y[[i]] <- as.matrix(mc.chain.list[[i]], ncol=1)[1:nsim2,]
+   x[[i]] <- as.matrix(x[[i]])
+   y[[i]] <- as.matrix(y[[i]])
+ }
> 
> local.acf1 <- acf(as.matrix(x[[1]]), type = "correlation", lag.max = lag.max, plot = FALSE)
> local.acf2 <- acf(as.matrix(y[[1]]), type = "correlation", lag.max = lag.max, plot = FALSE)
> global.acf1 <- globalACF(x, chains = c(1), component = 1, lag.max = lag.max, type = "correlation", avg = FALSE, graph = FALSE)[[1]]
> global.acf2 <- globalACF(y, chains = c(1), component = 1, lag.max = lag.max, type = "correlation", avg = FALSE, graph = FALSE)[[1]]
> 
> #### Figure 2a
> pdf(file = "AllOut/gaussian-acf_hist.pdf", width = 10, height= 4)
> par(mfrow = c(1,2))
> plot(as.matrix(local.acf1$acf), type = 'h', ylab = "Autocorrelation", xlab = "Lag")
> lines(as.matrix(local.acf2$acf), type = 'l', col = "steelblue1", lwd = 2)
> plot(as.matrix(global.acf1$acf), type = 'h', ylim = c(min(local.acf1$acf), 1), ylab = "Autocorrelation", xlab = "Lag")
> lines(as.matrix(global.acf2$acf), type = 'l', col = "steelblue1", lwd = 2)
> dev.off()
null device 
          1 
> 
> ### Figure 2b
> pdf(file = "AllOut/gaussian-acf_1e4.pdf", width = 10, height= 4)
> par(mfrow = c(1,2))
> l <- globalACF(x, chains = 0, component = 1, lag.max = lag.max, mean = "local", type = "correlation", col = "royalblue", leg = FALSE)
> g <- globalACF(x, chains = 0, component = 1, lag.max = lag.max, mean = "global", type = "correlation", col = "darkorange", leg = FALSE)
> dev.off()
null device 
          1 
> 
> 
> ##########################################
> ##########################################
> #### Ex-2 VAR (1) ########################
> ##########################################
> ##########################################
> 
> ##################Figure 3 ###############
> 
> load(file = "AllOut/var-five_chains.Rdata")
> 
> m <- 5
> p <- 2
> component <- 1
> lag.max <- 40
> 
> ### Figure 3a
> ncrop <- 1e3
> x <- list()
> for (i in 1:m){
+   x[[i]] <- mc.chain.list[[i]][1:ncrop,]
+ }
> 
> global.acf <- globalACF(x, type = "correlation", component = 1, lag.max = lag.max, chains = c(2), graph = FALSE, avg = FALSE)[[1]]
> local.acf <- acf(x[[2]][, component], lag.max = lag.max, type = "correlation", plot = FALSE)
> 
> pdf(file = paste("AllOut/var-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> plot(local.acf, main = expression("Locally centered ACF"))
> lines(seq(-lag.max, lag.max), true.acf[1,1,]/true.acf[1,1,lag.max + 1], col = "red")
> plot(global.acf, main = expression("Globally centered ACF"))
> lines(seq(-lag.max, lag.max), true.acf[1,1,]/true.acf[1,1,lag.max + 1], col = "red")
> dev.off()
null device 
          1 
> 
> ### Figure 3b
> 
> ncrop <- 1e4
> x <- list()
> for (i in 1:m){
+   x[[i]] <- mc.chain.list[[i]][1:ncrop,]
+ }
> 
> global.acf <- globalACF(x, type = "correlation", component = 1, lag.max = lag.max, chains = c(2), graph = FALSE, avg = FALSE)[[1]]
> local.acf <- acf(x[[2]][, component], lag.max = lag.max, type = "correlation", plot = FALSE)
> 
> pdf(file = paste("AllOut/var-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> plot(local.acf, main = expression("Locally centered ACF"))
> lines(seq(-lag.max, lag.max), true.acf[1,1,]/true.acf[1,1,lag.max + 1], col = "red")
> plot(global.acf, main = expression("Globally centered ACF"))
> lines(seq(-lag.max, lag.max), true.acf[1,1,]/true.acf[1,1,lag.max + 1], col = "red")
> dev.off()
null device 
          1 
> 
> ##################### Figure 4 ######################
> 
> min <- 5e2
> max <- 5e4
> step <- 5e2
> conv.pts <- seq(min, max, step)
> load(file = "AllOut/var-truth.Rdata")
> 
> ### Figure 4a
> 
> load(file = paste("AllOut/var-conv_data_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(asv, function(x) log(apply(x, 3, norm, "F") ) )
> r <- lapply(rsv, function(x) log(apply(x, 3, norm, "F") ) )
> a <- Reduce("rbind", a)
> r <- Reduce("rbind", r)
> 
> se.a <- apply(a, 2, sd)/sqrt(length(asv))
> se.r <- apply(r, 2, sd)/sqrt(length(rsv))
> 
> a <- colMeans(a)
> r <- colMeans(r)
> 
> pdf(file = "AllOut/var-frob.pdf", height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "Log of Frobenium norm", ylim = range(c(a, r, r + se.r, a - se.a, log(norm(truth, type = "F")))), lwd = 2)
> lines(conv.pts, r, col="royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> abline(h = log(norm(truth, type = "F")), col = "green3", lwd = 2)
> legend("bottomright", legend=c("A-SVE", "G-SVE", "Truth"),col=c("darkorange", "royalblue", "green3"), lty=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ### Figure 3b
> 
> load(file = paste("AllOut/var-conv_data_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(ess.asv, log)
> r <- lapply(ess.rsv, log)
> se.a <- 2*apply(Reduce("rbind", a), 2, sd)/sqrt(length(a))
> se.r <- 2*apply(Reduce("rbind", r), 2, sd)/sqrt(length(r))
> a <- Reduce("+", a)/length(ess.asv)
> r <- Reduce("+", r)/length(ess.rsv)
> 
> pdf(file = "AllOut/var-ess.pdf", height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "log(ESS/mn)", ylim = range(a, r), lwd = 2)
> lines(conv.pts, r, col = "royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> abline(h = log((det(target)/det(truth))^(1/p)), col = "green3", lwd = 2)
> legend("topright", legend=c("A-SVE", "G-SVE", "Truth"),col=c("darkorange", "royalblue", "green3"), lty=1, cex=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ################# Table 1 ######################
> check.pts <- c(5e2, 1e3, 5e3, 1e4, 5e4, 1e5)
> freq <- 1e3
> 
> load(file = paste("AllOut/var-out_check.pts_freq", freq, ".Rdata", sep = ""))
> 
> for (j in 1:length(check.pts)){
+   
+   nsim <- check.pts[j]
+   print(paste("Coverage probabilities for nsim =  ", nsim))
+   print(paste("ASV : ", mean(asv.coverage[[j]]), "GSV: ", mean(gsv.coverage[[j]])))
+   
+ }
[1] "Coverage probabilities for nsim =   500"
[1] "ASV :  0.633 GSV:  0.959"
[1] "Coverage probabilities for nsim =   1000"
[1] "ASV :  0.71 GSV:  0.956"
[1] "Coverage probabilities for nsim =   5000"
[1] "ASV :  0.843 GSV:  0.937"
[1] "Coverage probabilities for nsim =   10000"
[1] "ASV :  0.885 GSV:  0.924"
[1] "Coverage probabilities for nsim =   50000"
[1] "ASV :  0.928 GSV:  0.945"
[1] "Coverage probabilities for nsim =   1e+05"
[1] "ASV :  0.944 GSV:  0.952"
> 
> ##############################################
> ##############################################
> ########## Ex3 Boomerang #####################
> ##############################################
> ##############################################
> 
> library(plot3D)
> p <- 2
> A1 <- 1
> B1 <- 3
> C1 <- 8
> 
> A2 <- 1
> B2 <- 10
> C2 <- 7
> 
> ################## Figure 5 #############################
> 
> ### Figure 5a
> 
> load(file = paste(paste("AllOut/boom-two_chains_sp", A1, B1, C1, sep = "_"), ".Rdata", sep = ""))
> 
> pdf(file = paste(paste("AllOut/boom-2d_density_plot", A1, B1, C1, sep = "_"), ".pdf", sep = ""), height = 5, width = 5)
> contour2D(x=samples$x, y=samples$y, z=samples$z, colkey = FALSE, xlim=c(0,10), ylim=c(0,10))
> points(rbind(chain[,,1], chain[,,2]), cex=.2, col = c(rep("black",1e3), rep("darkorange",1e3)))
> dev.off()
null device 
          1 
> 
> ### Figure 5b
> 
> load(file = paste(paste("AllOut/boom-two_chains_sp", A2, B2, C2, sep = "_"), ".Rdata", sep = ""))
> 
> pdf(file = paste(paste("AllOut/boom-2d_density_plot", A2, B2, C2, sep = "_"), ".pdf", sep = ""), height = 5, width = 5)
> contour2D(x=samples$x, y=samples$y, z=samples$z, colkey = FALSE, xlim=c(0,10), ylim=c(0,10))
> points(rbind(chain[,,1], chain[,,2]), cex=.2, col = c(rep("black",1e3), rep("darkorange",1e3)))
> dev.off()
null device 
          1 
> 
> ########################## Figure  6 #####################
> 
> load(file = "AllOut/boom-five_chains_1_3_8.Rdata")
> m <- 5
> component <- 1
> lag.max <- 50
> nsim1 <- 1000
> nsim2 <- 1e5
> 
> x <- list()
> y <- list()
> for (i in 1:m){
+   x[[i]] <- mc.chain.list[[i]][1:nsim1,]
+   y[[i]] <- mc.chain.list[[i]][1:nsim2,]
+ }
> 
> global.acf1 <- globalACF(x, type = "correlation", lag.max = lag.max, component = 1, graph = FALSE)$"avg_ACF"
> global.acf2 <- globalACF(y, type = "correlation", lag.max = lag.max, component = 1, graph = FALSE)$"avg_ACF"
> local.acf1 <- globalACF(x, type = "correlation", lag.max = lag.max, mean = "local", component = 1, graph = FALSE)$"avg_ACF"
> local.acf2 <- globalACF(y, type = "correlation", lag.max = lag.max, mean = "local", component = 1, graph = FALSE)$"avg_ACF"
> 
> pdf(file = paste(paste("AllOut/boom-acf", A1, B1, C1, sep = "_"), ".pdf", sep = ""), width = 10, height = 4)
> par(mfrow = c(1,2))
> plot(local.acf1, xlab = "Lag", ylab = "Autocorrelation", main = "")
> lines(local.acf2$acf, col = "steelblue1", lwd=2)
> plot(global.acf1, xlab = "Lag", ylab = "Autocorrelation", main = "")
> lines(global.acf2$acf, col = "steelblue1", lwd=2)
> dev.off()
null device 
          1 
> 
> 
> ###################### Figure 7 ##########################
> 
> load(file = "AllOut/boom-five_chains_1_10_7.Rdata")
> nsim <- 1000
> x <- list()
> for (i in 1:m)
+   x[[i]] <- mc.chain.list[[i]][1:nsim,]
> 
> 
> global.acf <- globalACF(x, type = "correlation", lag.max = lag.max, component = 1, graph = FALSE)$"avg_ACF"
> local.acf <- globalACF(x, type = "correlation", lag.max = lag.max, mean = "local", component = 1, graph = FALSE)$"avg_ACF"
> 
> pdf(file = paste(paste("AllOut/boom-acf", A2, B2, C2, "n", sep = "_"),  nsim, ".pdf", sep = ""), width = 10, height = 4)
> par(mfrow = c(1,2))
> plot(local.acf, xlab = "Lag", ylab = "Autocorrelation", main = "")
> plot(global.acf, xlab = "Lag", ylab = "Autocorrelation", main = "")
> dev.off()
null device 
          1 
> 
> ####################### Figure 8 ########################
> 
> min <- 5e2
> max <- 1e5
> step <- 5e2
> conv.pts <- seq(min, max, step)
> 
> m <- 5
> 
> ### Figure 8a
> load(file = paste(paste("AllOut/boom1-conv_data_m", sep = "_"), m, "_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(ess.asv, log)
> r <- lapply(ess.rsv, log)
> se.a <- 2*apply(Reduce("rbind", a), 2, sd)/sqrt(length(a))
> se.r <- 2*apply(Reduce("rbind", r), 2, sd)/sqrt(length(r))
> a <- Reduce("+", a)/length(a)
> r <- Reduce("+", r)/length(r)
> 
> pdf(file = paste(paste("AllOut/boom-ess", A1, B1, C1, "m", sep = "_"), m, ".pdf", sep = ""), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "log(ESS/mn)", ylim = range(a, r), lwd=2)
> lines(conv.pts, r, col = "royalblue", lwd=2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("topright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, cex=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ### Figure 8b
> 
> min <- 5e2
> max <- 5e4
> step <- 5e2
> conv.pts <- seq(min, max, step)
> load(file = paste(paste("AllOut/boom2-conv_data_m", sep = "_"), m, "_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(ess.asv, log)
> r <- lapply(ess.rsv, log)
> se.a <- 2*apply(Reduce("rbind", a), 2, sd)/sqrt(length(a))
> se.r <- 2*apply(Reduce("rbind", r), 2, sd)/sqrt(length(r))
> a <- Reduce("+", a)/length(a)
> r <- Reduce("+", r)/length(r)
> 
> pdf(file = paste(paste("AllOut/boom-ess", A2, B2, C2, "m", sep = "_"), m, ".pdf", sep = ""), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "log(ESS/mn)", ylim = range(a, r), lwd=2)
> lines(conv.pts, r, col = "royalblue", lwd=2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("topright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, cex=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ####################### Figure 9 ####################
> 
> #### Figure 9a
> min <- 5e2
> max <- 1e5
> step <- 5e2
> conv.pts <- seq(min, max, step)
> m <- 5
> load(file = paste(paste("AllOut/boom1-conv_data_m", sep = "_"), m, "_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(asv[1:10], function(x) log(apply(x, 3, norm, "F") ) )
> r <- lapply(rsv[1:10], function(x) log(apply(x, 3, norm, "F") ) )
> a <- Reduce("rbind", a)
> r <- Reduce("rbind", r)
> 
> se.a <- apply(a, 2, sd)/sqrt(10)
> se.r <- apply(r, 2, sd)/sqrt(10)
> 
> a <- colMeans(a)
> r <- colMeans(r)
> 
> pdf(file = paste(paste("AllOut/boom-frob", A1, B1, C1, "m", sep = "_"), m, ".pdf", sep = ""), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "Log of Frobenium norm", ylim = range(c(a, r, r + se.r, a - se.a)), lwd = 2)
> lines(conv.pts, r, col="royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("bottomright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> #### Figure 9b
> 
> min <- 5e2
> max <- 5e4
> step <- 5e2
> conv.pts <- seq(min, max, step)
> m <- 5
> load(file = paste(paste("AllOut/boom2-conv_data_m", sep = "_"), m, "_min", min, "_max", max, ".Rdata", sep = ""))
> 
> a <- lapply(asv[1:10], function(x) log(apply(x, 3, norm, "F") ) )
> r <- lapply(rsv[1:10], function(x) log(apply(x, 3, norm, "F") ) )
> a <- Reduce("rbind", a)
> r <- Reduce("rbind", r)
> 
> se.a <- apply(a, 2, sd)/sqrt(10)
> se.r <- apply(r, 2, sd)/sqrt(10)
> 
> a <- colMeans(a)
> r <- colMeans(r)
> 
> pdf(file = paste(paste("AllOut/boom-frob", A2, B2, C2, "m", sep = "_"), m, ".pdf", sep = ""), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "Log of Frobenium norm", ylim = range(c(a, r, r + se.r, a - se.a)), lwd = 2)
> lines(conv.pts, r, col="royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("bottomright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ##################### Table 2 ########################
> 
> check.pts <- c(1e3, 5e3, 1e4, 2e4, 5e4, 1e5)
> freq <- 1000
> 
> ##### two chains
> 
> m <- 2
> load(file = paste(paste("AllOut/boom1-out_check.pts_m", sep = "_"), m, "_freq", freq, ".Rdata", sep=""))
> 
> for (j in 1:length(check.pts)){
+   nsim <- check.pts[j]
+   print(paste("Coverage probabilities for nsim =  ", nsim))
+   print(paste("ASV : ", mean(asv.coverage[[j]]), "GSV: ", mean(gsv.coverage[[j]])))
+ }
[1] "Coverage probabilities for nsim =   1000"
[1] "ASV :  0.792 GSV:  0.869"
[1] "Coverage probabilities for nsim =   5000"
[1] "ASV :  0.595 GSV:  0.7"
[1] "Coverage probabilities for nsim =   10000"
[1] "ASV :  0.563 GSV:  0.665"
[1] "Coverage probabilities for nsim =   20000"
[1] "ASV :  0.627 GSV:  0.703"
[1] "Coverage probabilities for nsim =   50000"
[1] "ASV :  0.775 GSV:  0.814"
[1] "Coverage probabilities for nsim =   1e+05"
[1] "ASV :  0.847 GSV:  0.864"
> 
> ##### five chains
> 
> m <- 5
> load(file = paste(paste("AllOut/boom1-out_check.pts_m", sep = "_"), m, "_freq", freq, ".Rdata", sep=""))
> 
> for (j in 1:length(check.pts)){
+   nsim <- check.pts[j]
+   print(paste("Coverage probabilities for nsim =  ", nsim))
+   print(paste("ASV : ", mean(asv.coverage[[j]]), "GSV: ", mean(gsv.coverage[[j]])))
+   }
[1] "Coverage probabilities for nsim =   1000"
[1] "ASV :  0.153 GSV:  0.265"
[1] "Coverage probabilities for nsim =   5000"
[1] "ASV :  0.402 GSV:  0.639"
[1] "Coverage probabilities for nsim =   10000"
[1] "ASV :  0.594 GSV:  0.741"
[1] "Coverage probabilities for nsim =   20000"
[1] "ASV :  0.688 GSV:  0.802"
[1] "Coverage probabilities for nsim =   50000"
[1] "ASV :  0.804 GSV:  0.863"
[1] "Coverage probabilities for nsim =   1e+05"
[1] "ASV :  0.885 GSV:  0.904"
> 
> ##################### Table 3 ########################
> 
> check.pts <- c(1e3, 2e3, 5e3, 1e4, 2e4, 5e4)
> freq <- 1e3
> 
> ##### two chains
> 
> m <- 2
> load(file = paste(paste("AllOut/boom2-out_check.pts_m", sep = "_"), m, "_freq", freq, ".Rdata", sep=""))
> 
> for (j in 1:length(check.pts)){
+   nsim <- check.pts[j]
+   print(paste("Coverage probabilities for nsim =  ", nsim))
+   print(paste("ASV : ", mean(asv.coverage[[j]]), "GSV: ", mean(gsv.coverage[[j]])))
+ }
[1] "Coverage probabilities for nsim =   1000"
[1] "ASV :  0.856 GSV:  0.868"
[1] "Coverage probabilities for nsim =   2000"
[1] "ASV :  0.887 GSV:  0.897"
[1] "Coverage probabilities for nsim =   5000"
[1] "ASV :  0.921 GSV:  0.925"
[1] "Coverage probabilities for nsim =   10000"
[1] "ASV :  0.928 GSV:  0.93"
[1] "Coverage probabilities for nsim =   20000"
[1] "ASV :  0.933 GSV:  0.934"
[1] "Coverage probabilities for nsim =   50000"
[1] "ASV :  0.943 GSV:  0.944"
> 
> ##### five chains
> 
> m <- 5
> load(file = paste(paste("AllOut/boom2-out_check.pts_m", sep = "_"), m, "_freq", freq, ".Rdata", sep=""))
> 
> for (j in 1:length(check.pts)){
+   nsim <- check.pts[j]
+   print(paste("Coverage probabilities for nsim =  ", nsim))
+   print(paste("ASV : ", mean(asv.coverage[[j]]), "GSV: ", mean(gsv.coverage[[j]])))
+ }
[1] "Coverage probabilities for nsim =   1000"
[1] "ASV :  0.895 GSV:  0.91"
[1] "Coverage probabilities for nsim =   2000"
[1] "ASV :  0.917 GSV:  0.924"
[1] "Coverage probabilities for nsim =   5000"
[1] "ASV :  0.91 GSV:  0.915"
[1] "Coverage probabilities for nsim =   10000"
[1] "ASV :  0.919 GSV:  0.926"
[1] "Coverage probabilities for nsim =   20000"
[1] "ASV :  0.941 GSV:  0.942"
[1] "Coverage probabilities for nsim =   50000"
[1] "ASV :  0.951 GSV:  0.952"
> 
> ######################################################
> ######################################################
> ############## Ex3 Sensor Metwork ####################
> ######################################################
> ######################################################
> 
> p <- 8
> m <- 5
> 
> ######################## Figure 10 ########################
> 
> load(file = "AllOut/sensor-five_chains.Rdata")
> nsim1 = 1e5
> 
> ### Trace plot - Location-1
> 
> pdf(file = "AllOut/sensor-trace_loc1.pdf", height = 4, width = 10)
> par(mfrow = c(1,2))
> plot.ts(mc.chain.list[[1]][1:nsim1,1], ylim = range(mc.chain.list[[1]][,1], mc.chain.list[[5]][,1]), ylab = expression(x[11]), col = rgb(8, 69, 148, maxColorValue = 255))
> par(new = TRUE)
> plot.ts(mc.chain.list[[5]][1:nsim1,1], ylim = range(mc.chain.list[[1]][,1], mc.chain.list[[5]][,1]), yaxt='n', xaxt='n', ylab = "", col = rgb(107, 174, 214, maxColorValue = 255))
> 
> plot.ts(mc.chain.list[[1]][1:nsim1,2], ylim = range(mc.chain.list[[1]][,2], mc.chain.list[[5]][,2]), ylab = expression(x[12]), col = rgb(8, 69, 148, maxColorValue = 255))
> par(new = TRUE)
> plot.ts(mc.chain.list[[5]][1:nsim1,2], ylim = range(mc.chain.list[[1]][,2], mc.chain.list[[5]][,2]), yaxt='n', xaxt='n', ylab = "", col = rgb(107, 174, 214, maxColorValue = 255))
> dev.off()
null device 
          1 
> 
> ######################## Figure 11 ############################
> 
> load(file = "AllOut/sensor-five_chains.Rdata")
> component <- 1
> lag.max <- 40
> 
> ### Figure 11a
> ncrop <- 5e3
> 
> x <- list()
> for (i in 1:m){
+   x[[i]] <- mc.chain.list[[i]][1:ncrop,]
+ }
> 
> pdf(file = "AllOut/sensor-acf_n5e3.pdf", height = 4, width = 4)
> globalACF(x, chains = 0, component = component, lag.max = lag.max, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.970 0.945 0.921 0.902 0.880 0.867 0.855 0.844 0.833 0.822 0.813 0.802 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.791 0.780 0.770 0.759 0.749 0.739 0.729 0.720 0.710 0.702 0.693 0.685 0.677 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.668 0.659 0.650 0.642 0.635 0.627 0.619 0.611 0.603 0.595 0.587 0.579 0.572 
   39    40 
0.566 0.559 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.984 0.968 0.952 0.938 0.924 0.910 0.897 0.885 0.873 0.861 0.850 0.838 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.826 0.814 0.803 0.791 0.780 0.769 0.757 0.746 0.736 0.726 0.716 0.706 0.698 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.689 0.680 0.669 0.658 0.648 0.638 0.628 0.617 0.607 0.596 0.586 0.579 0.572 
   39    40 
0.568 0.563 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.979 0.958 0.937 0.918 0.899 0.880 0.861 0.842 0.824 0.805 0.787 0.772 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.756 0.740 0.726 0.711 0.697 0.683 0.670 0.659 0.647 0.636 0.624 0.612 0.600 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.590 0.580 0.572 0.564 0.556 0.548 0.540 0.532 0.523 0.515 0.505 0.496 0.487 
   39    40 
0.479 0.470 

$chainsACF[[3]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.927 0.880 0.834 0.792 0.735 0.721 0.716 0.710 0.704 0.699 0.698 0.688 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.677 0.667 0.656 0.647 0.638 0.629 0.620 0.611 0.601 0.596 0.592 0.590 0.584 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.573 0.564 0.554 0.548 0.542 0.537 0.531 0.525 0.520 0.514 0.508 0.503 0.497 
   39    40 
0.492 0.487 

$chainsACF[[4]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.974 0.949 0.924 0.915 0.907 0.899 0.890 0.883 0.875 0.867 0.860 0.852 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.844 0.838 0.830 0.823 0.815 0.807 0.800 0.793 0.784 0.776 0.768 0.761 0.753 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.746 0.738 0.731 0.723 0.716 0.708 0.699 0.691 0.683 0.674 0.666 0.658 0.649 
   39    40 
0.641 0.633 

$chainsACF[[5]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.985 0.973 0.960 0.947 0.935 0.923 0.912 0.900 0.889 0.879 0.870 0.861 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.852 0.843 0.834 0.825 0.816 0.807 0.799 0.790 0.783 0.775 0.767 0.759 0.751 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.743 0.735 0.727 0.719 0.711 0.703 0.696 0.689 0.682 0.675 0.668 0.661 0.655 
   39    40 
0.649 0.643 


> par(new = TRUE)
> globalACF(x, chains = 0, component = component, lag.max = lag.max, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.998 0.998 0.998 0.997 0.997 0.997 0.996 0.996 0.996 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.995 0.995 0.995 0.994 0.994 0.994 0.994 0.993 0.993 0.993 0.992 0.992 0.992 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.991 0.991 0.991 0.991 0.990 0.990 0.990 0.989 0.989 0.989 0.989 0.988 0.988 
   39    40 
0.988 0.987 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.997 0.997 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.997 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 0.994 0.994 0.994 0.994 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.993 0.993 0.993 0.993 0.992 0.992 0.992 0.992 0.991 0.991 0.991 0.991 0.991 
   39    40 
0.990 0.990 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.998 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.997 0.997 0.997 0.997 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 0.995 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.994 0.994 0.994 0.994 0.994 0.993 0.993 0.993 0.993 0.993 0.992 0.992 0.992 
   39    40 
0.992 0.992 

$chainsACF[[3]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.999 0.998 0.998 0.997 0.996 0.996 0.996 0.995 0.995 0.994 0.994 0.994 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.993 0.993 0.993 0.992 0.992 0.991 0.991 0.991 0.990 0.990 0.990 0.990 0.989 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.989 0.988 0.988 0.988 0.988 0.987 0.987 0.987 0.986 0.986 0.986 0.986 0.985 
   39    40 
0.985 0.985 

$chainsACF[[4]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.997 0.997 0.997 0.996 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.996 0.996 0.995 0.995 0.995 0.995 0.994 0.994 0.994 0.993 0.993 0.993 0.992 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.992 0.992 0.991 0.991 0.991 0.991 0.990 0.990 0.990 0.989 0.989 0.989 0.988 
   39    40 
0.988 0.988 

$chainsACF[[5]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.999 0.999 0.998 0.998 0.998 0.997 0.997 0.996 0.996 0.995 0.995 0.994 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.994 0.993 0.993 0.993 0.992 0.992 0.991 0.991 0.991 0.990 0.990 0.989 0.989 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.989 0.988 0.988 0.987 0.987 0.987 0.986 0.986 0.985 0.985 0.985 0.984 0.984 
   39    40 
0.984 0.983 


> dev.off()
null device 
          1 
> 
> ### Figure 11b
> 
> ncrop <- 5e4
> 
> x <- list()
> for (i in 1:m){
+   x[[i]] <- mc.chain.list[[i]][1:ncrop,]
+ }
> 
> pdf(file = "AllOut/sensor-acf_n5e4.pdf", height = 4, width = 4)
> globalACF(x, chains = 0, component = component, lag.max = lag.max, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.996 0.992 0.988 0.984 0.980 0.977 0.975 0.972 0.969 0.967 0.964 0.962 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.959 0.957 0.954 0.952 0.949 0.947 0.945 0.943 0.940 0.938 0.936 0.934 0.932 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.930 0.928 0.926 0.924 0.922 0.920 0.919 0.917 0.915 0.914 0.912 0.911 0.909 
   39    40 
0.908 0.906 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.999 0.999 0.998 0.998 0.997 0.997 0.996 0.996 0.995 0.995 0.994 0.994 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.993 0.993 0.992 0.992 0.991 0.990 0.990 0.989 0.989 0.988 0.988 0.987 0.987 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.986 0.986 0.985 0.985 0.984 0.984 0.983 0.983 0.982 0.982 0.981 0.981 0.981 
   39    40 
0.980 0.980 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.998 0.998 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.998 0.998 0.998 0.998 0.998 0.997 0.997 0.997 0.997 0.997 0.997 0.997 0.996 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.996 0.996 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 0.995 0.995 0.995 
   39    40 
0.995 0.994 

$chainsACF[[3]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.981 0.964 0.948 0.932 0.915 0.903 0.892 0.881 0.871 0.861 0.851 0.841 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.831 0.821 0.811 0.801 0.792 0.783 0.774 0.765 0.757 0.749 0.741 0.733 0.726 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.718 0.710 0.702 0.695 0.688 0.681 0.674 0.668 0.662 0.657 0.652 0.646 0.641 
   39    40 
0.637 0.632 

$chainsACF[[4]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.998 0.996 0.995 0.993 0.991 0.990 0.988 0.986 0.985 0.983 0.982 0.980 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.979 0.977 0.976 0.974 0.973 0.971 0.970 0.968 0.967 0.965 0.964 0.962 0.961 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.959 0.958 0.956 0.955 0.953 0.952 0.950 0.949 0.947 0.946 0.944 0.943 0.941 
   39    40 
0.940 0.938 

$chainsACF[[5]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.999 0.998 0.998 0.998 0.997 0.997 0.997 0.996 0.996 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.996 0.995 0.995 0.995 0.994 0.994 0.994 0.993 0.993 0.993 0.992 0.992 0.992 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.992 0.991 0.991 0.991 0.990 0.990 0.990 0.989 0.989 0.989 0.988 0.988 0.988 
   39    40 
0.988 0.987 


> par(new = TRUE)
> globalACF(x, chains = 0, component = component, lag.max = lag.max, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.997 0.997 0.997 0.997 0.997 0.996 0.996 0.996 0.996 0.996 0.995 0.995 0.995 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.995 0.995 0.994 0.994 0.994 0.994 0.994 0.993 0.993 0.993 0.993 0.993 0.993 
   39    40 
0.992 0.992 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.997 0.997 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.994 0.994 0.994 0.994 0.993 0.993 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.993 0.993 0.992 0.992 0.992 0.992 0.991 0.991 0.991 0.990 0.990 0.990 0.990 
   39    40 
0.990 0.990 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.998 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.998 0.998 0.998 0.998 0.998 0.998 0.997 0.997 0.997 0.997 0.997 0.997 0.997 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.997 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 
   39    40 
0.995 0.995 

$chainsACF[[3]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.998 0.998 0.998 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.998 0.998 0.998 0.998 0.998 0.997 0.997 0.997 0.997 0.997 0.997 0.997 0.997 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.997 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 0.996 
   39    40 
0.995 0.995 

$chainsACF[[4]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 1.000 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.998 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.997 0.997 0.997 0.996 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 0.995 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.994 0.994 0.994 0.994 0.993 0.993 0.993 0.993 0.993 0.992 0.992 0.992 0.992 
   39    40 
0.992 0.991 

$chainsACF[[5]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 1.000 0.999 0.999 0.999 0.999 0.998 0.998 0.998 0.998 0.997 0.997 0.997 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.997 0.996 0.996 0.996 0.996 0.995 0.995 0.995 0.995 0.995 0.994 0.994 0.994 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.994 0.993 0.993 0.993 0.993 0.992 0.992 0.992 0.992 0.991 0.991 0.991 0.991 
   39    40 
0.991 0.990 


> dev.off()
null device 
          1 
> 
> ######################## Figure 12 ###########################
> 
> min <- 500
> max <- 2e5
> step <- 500
> conv.pts <- seq(min, max, step)
> 
> load(file = paste("AllOut/sensor-conv_data_m", m, "_min", min, "_max", max, ".Rdata", sep = ""))
> 
> 
> ### Figure 12a
> 
> a <- lapply(asv, function(x) log(apply(x, 3, norm, "F") ) )
> r <- lapply(rsv, function(x) log(apply(x, 3, norm, "F") ) )
> a <- Reduce("rbind", a)
> r <- Reduce("rbind", r)
> 
> se.a <- apply(a, 2, sd)/sqrt(length(asv))
> se.r <- apply(r, 2, sd)/sqrt(length(rsv))
> 
> a <- colMeans(a)
> r <- colMeans(r)
> 
> pdf(file = paste("AllOut/sensor-frob.pdf", sep = ""), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "Log of Frobenium norm", ylim = range(c(a, r, r + se.r, a - se.a)), lwd = 2)
> lines(conv.pts, r, col="royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("bottomright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, lwd = 2)
> dev.off()
null device 
          1 
> 
> ### Figure 12b
> 
> a <- lapply(ess.asv, log)
> r <- lapply(ess.rsv, log)
> se.a <- 2*apply(Reduce("rbind", a), 2, sd)/sqrt(length(a))
> se.r <- 2*apply(Reduce("rbind", r), 2, sd)/sqrt(length(r))
> a <- Reduce("+", a)/length(ess.asv)
> r <- Reduce("+", r)/length(ess.rsv)
> 
> pdf(file = paste("AllOut/sensor-ess.pdf", sep = "_"), height = 5, width = 5)
> plot(conv.pts, a, type = "l", col = "darkorange", main = "", xlab = "Simulation size", ylab = "log(ESS/mn)", ylim = range(a, r), lwd = 2)
> lines(conv.pts, r, col = "royalblue", lwd = 2)
> segments(x0 = conv.pts, y0 = (a - se.a), y1 = (a + se.a), col = adjustcolor("darkorange", alpha.f = .50))
> segments(x0 = conv.pts, y0 = (r - se.r), y1 = (r + se.r), col = adjustcolor("royalblue", alpha.f = .50))
> legend("topright", legend=c("A-SVE", "G-SVE"),col=c("darkorange", "royalblue"), lty=1, cex=1.2, lwd=2)
> dev.off()
null device 
          1 
> 
> 
> ###############################################
> ###############################################
> ############ Ex4 Poisson Change ###############
> ###############################################
> ###############################################
> 
> ################### Figure 13 #################
> 
> load(file = "AllOut/poisson-two_chains.Rdata")
> 
> n <- 5e4
> pdf(file = paste("AllOut/poisson-trace_n", n, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> plot.ts(mc.chain.list[[1]][1:n,2], col = "steelblue1", xlab = "Time", ylab = "Component-2", main = "")
> lines(1:n, mc.chain.list[[2]][1:n, 2], col = "dodgerblue4", xlab = "Time", ylab = "Component-2", main = "")
> plot.ts(mc.chain.list[[1]][1:n,3], col = "steelblue1", xlab = "Time", ylab = "Component-3", main = "")
> lines(1:n, mc.chain.list[[2]][1:n,3], col = "dodgerblue4", xlab = "Time", ylab = "Component-3", main = "")
> dev.off()
null device 
          1 
> 
> ################### Figure 14 ########################
> 
> load(file = "AllOut/poisson-two_chains.Rdata")
> m <- 2
> component <- 2
> 
> ### Figure 14a
> 
> ncrop <- 1e3
> x <- list()
> 
> for (i in 1:m){
+   x[[i]] <- as.matrix(mc.chain.list[[i]][1:ncrop,])
+ }
> 
> pdf(file = paste("AllOut/poisson-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> globalACF(x, chains=0, component = component, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

     0      1      2      3      4      5      6      7      8      9     10 
 1.000  0.382  0.295  0.279  0.248  0.222  0.207  0.205  0.197  0.179  0.169 
    11     12     13     14     15     16     17     18     19     20     21 
 0.165  0.140  0.081  0.092  0.080  0.064  0.061  0.067  0.071  0.052  0.057 
    22     23     24     25     26     27     28     29     30 
 0.015 -0.005  0.010  0.010  0.006  0.025  0.022  0.023  0.020 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.689 0.583 0.521 0.507 0.458 0.427 0.393 0.378 0.369 0.323 0.303 0.281 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.252 0.221 0.189 0.153 0.139 0.133 0.107 0.092 0.082 0.030 0.011 0.005 0.006 
   26    27    28    29    30 
0.036 0.047 0.051 0.029 0.028 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

     0      1      2      3      4      5      6      7      8      9     10 
 1.000  0.074  0.007  0.037 -0.012 -0.014 -0.013  0.017  0.016 -0.010  0.016 
    11     12     13     14     15     16     17     18     19     20     21 
 0.027 -0.002 -0.090 -0.037 -0.028 -0.025 -0.017  0.001  0.036  0.012  0.032 
    22     23     24     25     26     27     28     29     30 
 0.000 -0.021  0.015  0.015 -0.025  0.003 -0.006  0.016  0.011 


> globalACF(x, chains=0, component = component, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.973 0.963 0.958 0.957 0.953 0.950 0.947 0.945 0.944 0.940 0.937 0.935 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.932 0.929 0.926 0.923 0.922 0.921 0.918 0.917 0.916 0.910 0.908 0.907 0.905 
   26    27    28    29    30 
0.907 0.906 0.906 0.903 0.902 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.950 0.933 0.923 0.921 0.914 0.909 0.904 0.902 0.900 0.893 0.890 0.886 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.882 0.876 0.871 0.866 0.864 0.864 0.859 0.857 0.856 0.847 0.843 0.841 0.840 
   26    27    28    29    30 
0.844 0.844 0.844 0.839 0.838 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.995 0.994 0.993 0.992 0.991 0.990 0.989 0.988 0.987 0.986 0.985 0.984 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.983 0.982 0.981 0.980 0.979 0.978 0.977 0.976 0.975 0.974 0.973 0.972 0.971 
   26    27    28    29    30 
0.970 0.969 0.968 0.967 0.966 


> dev.off()
null device 
          1 
> 
> ### Figure 14b
> 
> ncrop <- 1e4
> x <- list()
> for (i in 1:m){
+   x[[i]] <- as.matrix(mc.chain.list[[i]][1:ncrop,])
+ }
> 
> pdf(file = paste("AllOut/poisson-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> globalACF(x, chains=0, component = component, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.977 0.972 0.969 0.967 0.965 0.963 0.961 0.958 0.957 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.950 0.949 0.947 0.946 0.945 0.944 0.942 0.941 0.940 0.938 0.937 0.936 0.934 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.934 0.933 0.932 0.931 0.930 0.929 0.928 0.926 0.926 0.925 0.925 0.924 0.924 
   39    40 
0.922 0.921 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.977 0.970 0.967 0.966 0.964 0.963 0.960 0.959 0.958 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.950 0.948 0.946 0.945 0.944 0.942 0.940 0.939 0.939 0.937 0.935 0.934 0.932 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.932 0.931 0.930 0.927 0.926 0.924 0.922 0.921 0.920 0.919 0.919 0.919 0.919 
   39    40 
0.919 0.918 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.976 0.973 0.971 0.967 0.965 0.963 0.961 0.958 0.957 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.951 0.950 0.948 0.947 0.947 0.946 0.944 0.943 0.941 0.940 0.939 0.938 0.937 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.936 0.935 0.935 0.935 0.934 0.934 0.934 0.932 0.933 0.931 0.931 0.929 0.928 
   39    40 
0.926 0.924 


> globalACF(x, chains=0, component = component, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.977 0.972 0.969 0.967 0.965 0.963 0.961 0.958 0.957 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.950 0.949 0.947 0.946 0.945 0.944 0.942 0.941 0.940 0.938 0.937 0.936 0.935 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.934 0.933 0.932 0.931 0.930 0.929 0.928 0.926 0.926 0.925 0.925 0.924 0.924 
   39    40 
0.922 0.921 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.977 0.970 0.967 0.966 0.964 0.963 0.960 0.959 0.958 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.950 0.948 0.946 0.945 0.944 0.942 0.940 0.939 0.939 0.937 0.935 0.934 0.932 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.932 0.931 0.930 0.927 0.926 0.924 0.922 0.921 0.920 0.919 0.919 0.919 0.919 
   39    40 
0.919 0.918 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.976 0.973 0.971 0.967 0.965 0.963 0.961 0.958 0.957 0.955 0.954 0.952 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.951 0.950 0.948 0.947 0.947 0.946 0.944 0.943 0.942 0.940 0.939 0.938 0.937 
   26    27    28    29    30    31    32    33    34    35    36    37    38 
0.936 0.935 0.935 0.935 0.934 0.934 0.934 0.932 0.933 0.931 0.931 0.929 0.928 
   39    40 
0.926 0.925 


> dev.off()
null device 
          1 
> 
> ############################################
> ##########################################
> ######## Ex5 Network Crawling ##############
> #############################################
> #############################################
> 
> ##################  Figure 15 #################
> 
> m <- 2
> component <- 3
> load(file = "AllOut/magnolia-two_chains.Rdata")
> 
> ### Figure 15a
> 
> ncrop <- 1e2
> x <- list()
> for (i in 1:m){
+   x[[i]] <- as.matrix(mc.chain.list[[i]][1:ncrop,])
+ }
> 
> pdf(file = paste("AllOut/magnolia-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> globalACF(x, chains=0, component = component, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.870 0.775 0.661 0.600 0.563 0.516 0.471 0.434 0.386 0.336 0.284 0.229 
   13    14    15    16    17    18    19    20 
0.214 0.210 0.201 0.205 0.201 0.192 0.185 0.155 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.965 0.910 0.871 0.842 0.814 0.785 0.757 0.729 0.700 0.672 0.644 0.615 
   13    14    15    16    17    18    19    20 
0.587 0.558 0.530 0.502 0.473 0.445 0.417 0.388 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

     0      1      2      3      4      5      6      7      8      9     10 
 1.000  0.776  0.640  0.452  0.358  0.313  0.246  0.184  0.139  0.072  0.001 
    11     12     13     14     15     16     17     18     19     20 
-0.076 -0.158 -0.158 -0.138 -0.128 -0.091 -0.071 -0.061 -0.046 -0.079 


> globalACF(x, chains=0, component = component, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.930 0.881 0.818 0.784 0.763 0.737 0.711 0.691 0.664 0.638 0.610 0.581 
   13    14    15    16    17    18    19    20 
0.568 0.558 0.548 0.543 0.533 0.522 0.511 0.489 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.978 0.947 0.923 0.903 0.882 0.861 0.841 0.820 0.800 0.779 0.759 0.738 
   13    14    15    16    17    18    19    20 
0.718 0.697 0.676 0.656 0.635 0.615 0.594 0.574 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.883 0.814 0.714 0.665 0.645 0.612 0.582 0.561 0.528 0.497 0.462 0.424 
   13    14    15    16    17    18    19    20 
0.418 0.419 0.419 0.429 0.430 0.430 0.428 0.403 


> dev.off()
null device 
          1 
> 
> ### Figure 15b
> 
> ncrop <- 1e3
> x <- list()
> for (i in 1:m){
+   x[[i]] <- as.matrix(mc.chain.list[[i]][1:ncrop,])
+ }
> 
> pdf(file = paste("AllOut/magnolia-acf_n", ncrop, ".pdf", sep = ""), height = 4, width = 10)
> par(mfrow = c(1,2))
> globalACF(x, chains=0, component = component, mean = "local", type = "correlation", leg = FALSE, col = "darkorange")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.911 0.870 0.834 0.790 0.768 0.735 0.706 0.685 0.659 0.638 0.613 0.595 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.574 0.555 0.535 0.518 0.504 0.487 0.479 0.457 0.440 0.420 0.410 0.395 0.388 
   26    27    28    29    30 
0.382 0.375 0.369 0.360 0.354 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.921 0.869 0.829 0.783 0.746 0.699 0.663 0.639 0.615 0.592 0.566 0.547 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.525 0.502 0.476 0.460 0.444 0.424 0.410 0.384 0.366 0.342 0.330 0.314 0.303 
   26    27    28    29    30 
0.297 0.287 0.280 0.274 0.272 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.901 0.871 0.840 0.796 0.791 0.771 0.749 0.730 0.702 0.683 0.660 0.644 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.623 0.608 0.593 0.577 0.565 0.551 0.548 0.531 0.514 0.498 0.489 0.476 0.472 
   26    27    28    29    30 
0.467 0.462 0.457 0.446 0.436 


> globalACF(x, chains=0, component = component, mean = "global", type = "correlation", leg = FALSE, col = "royalblue")
$avg_ACF

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.912 0.872 0.837 0.793 0.772 0.738 0.710 0.689 0.663 0.642 0.618 0.601 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.579 0.561 0.541 0.525 0.511 0.494 0.485 0.464 0.447 0.427 0.417 0.403 0.395 
   26    27    28    29    30 
0.390 0.382 0.377 0.368 0.362 

$chainsACF
$chainsACF[[1]]

Autocorrelations of series ‘mc.chains[, 1]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.921 0.870 0.830 0.786 0.749 0.702 0.667 0.643 0.619 0.596 0.571 0.552 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.530 0.507 0.482 0.465 0.450 0.430 0.416 0.390 0.372 0.348 0.337 0.320 0.310 
   26    27    28    29    30 
0.304 0.294 0.287 0.280 0.279 

$chainsACF[[2]]

Autocorrelations of series ‘mc.chains[, i]’, by lag

    0     1     2     3     4     5     6     7     8     9    10    11    12 
1.000 0.903 0.873 0.843 0.799 0.794 0.775 0.753 0.735 0.707 0.689 0.665 0.650 
   13    14    15    16    17    18    19    20    21    22    23    24    25 
0.629 0.614 0.600 0.584 0.572 0.558 0.555 0.539 0.522 0.506 0.498 0.485 0.481 
   26    27    28    29    30 
0.476 0.471 0.466 0.455 0.445 


> dev.off()
null device 
          1 
> 
> 
> ################# The End ########################
> 
> 
> proc.time()
   user  system elapsed 
  3.937   0.443   4.849 
